//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub picture: Option<Vec<u8>>,
    pub status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::chores::Entity")]
    Chores,
    #[sea_orm(has_many = "super::expenses::Entity")]
    Expenses,
    #[sea_orm(has_many = "super::user_chore_assignments::Entity")]
    UserChoreAssignments,
    #[sea_orm(has_many = "super::user_expense_assignments::Entity")]
    UserExpenseAssignments,
}

impl Related<super::chores::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chores.def()
    }
}

impl Related<super::expenses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Expenses.def()
    }
}

impl Related<super::user_chore_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserChoreAssignments.def()
    }
}

impl Related<super::user_expense_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserExpenseAssignments.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
